#!/usr/bin/env ruby
require 'fileutils'
require 'benchmark'
require 'pathname'
require 'shellwords'
require 'English'
require 'benchmark/ips'

class Benchmarking
  ROOT = Pathname File.expand_path(File.join(*['..', '..']), __FILE__)
  TMP_DIR_NAME = File.join('tmp', 'bench')
  TMP_DIR = File.join(ROOT, TMP_DIR_NAME)

  attr_reader :prepend, :append, :gem_require_paths

  def initialize(prepend: '', append: '')
    @prepend = prepend
    @append = append
    @gem_require_paths = []
    refresh_temp_dir
  end

  def temp_dir_empty?
    Dir[File.join(TMP_DIR, '*')].none?
  end

  def empty_temp_dir
    FileUtils.mkdir_p(TMP_DIR)
    Dir[File.join(TMP_DIR, '*')].each do |file|
      FileUtils.rm(file)
    end
  end

  def fill_temp_dir
    Dir[File.join(ROOT, 'test', 'benchmark', '*.rb')].each do |file|
      FileUtils.cp(file, File.join(TMP_DIR, File.basename(file)))
    end
    at_exit { empty_temp_dir }

    directory_name = `bundle exec gem unpack benchmark-ips --target=#{Shellwords.shellescape(TMP_DIR)}`[/benchmark-ips.+\d/]
    gem_path = File.join(TMP_DIR, directory_name)
    gem_require_paths << File.join(TMP_DIR_NAME, directory_name, 'lib')
    at_exit { FileUtils.rm_rf(gem_path) }
  end

  def refresh_temp_dir
    empty_temp_dir
    fill_temp_dir
  end

  def benchmark_tests(prepend = prepend())
    tmp_dir = Shellwords.shellescape(TMP_DIR)
    sh("#{prepend} bundle exec ruby -Ilib:test:#{gem_require_paths.join(':')} #{tmp_dir}/*_benchmark.rb #{append}")
  end

  def current_branch
    @current_branch ||= `cat .git/HEAD | cut -d/ -f3,4,5`.chomp
  end

  def checkout_ref(ref)
    puts `git checkout --quiet #{ref}`.chomp
    abort "Checkout failed: #{ref}, #{$CHILD_STATUS.exitstatus}" unless $CHILD_STATUS.success?
  end

  def benchmark_refs(ref1: nil, ref2: nil)
    ref0 = current_branch
    ref1 ||= current_branch
    ref2 ||= 'master'
    reports = []
    {
      'caching on: caching serializers' => 'TIMES=100 CACHE_ON=true CACHING_SERIALIZER=true DEBUG=true'
      # 'caching off: caching serializers' => 'CACHE_ON=false CACHING_SERIALIZER=true',
      # 'caching on: non-caching serializers' => 'CACHE_ON=true CACHING_SERIALIZER=false',
      # 'caching off: non-caching serializers' => 'CACHE_ON=false CACHING_SERIALIZER=false'
    }.each do |name, env_vars| 
      reports <<  Benchmark.ips(quiet: true) do |x|
        # the warmup phase (default 2) and calculation phase (default 5)
        x.config(time: 5, warmup: 2)
        x.report("#{ref1}--#{name}") do |_times|
          checkout_ref(ref1)
          benchmark_tests(env_vars)
        end

        x.report("#{ref2}--#{name}") do |_times|
          checkout_ref(ref2)
          benchmark_tests(env_vars)
        end

      end
    end

    checkout_ref(ref0)

    reports
  rescue Exception # rubocop:disable Lint/RescueException
    checkout_ref(ref0)
    raise
  end

  def run_benchmark
    bundle
    parse_measurement Benchmark.measure {
      benchmark_tests
    }
  end

  def run_benchmark_at_ref(ref)
    checkout_ref(ref)
    run_benchmark
  end

  def bundle
    sh('rm -f Gemfile.lock; bundle check || bundle --local --quiet || bundle --quiet')
  end

  def parse_measurement(measurement)
    user = measurement.utime
    system = measurement.stime
    total = measurement.total
    real = measurement.real
    {
      :real => real,
      :total => total,
      :user => user,
      :system => system
    }
  end

  def sh(cmd)
    puts cmd
    system(cmd)
  end
end

if $PROGRAM_NAME == __FILE__
  # Example configuration using all options
  #   benchmarking = Benchmarking.new(prepend: 'TIMES=1000 CACHE_ON=true CACHING_SERIALIZER=true DEBUG=true', append: '> /dev/null')
  #   benchmarking = Benchmarking.new(prepend: 'CACHE_ON=false CACHING_SERIALIZER=false', append: '> /dev/null')
  benchmarking = Benchmarking.new(append: '> /dev/null')
  test_type = ARGV[0]
  case test_type
  when 'current'
    puts "Ran in #{benchmarking.run_benchmark} seconds."
  else
    # Default: Compare current_branch to master
    # Optionally: pass in two refs as args to `bin/bench`
    # TODO: Consider checking across more revisions, to automatically find problems.
    reports = benchmarking.benchmark_refs(ref1: ARGV[0], ref2: ARGV[1])
    reports.each do |report|
      puts report.run_comparison
    end
  end
end
