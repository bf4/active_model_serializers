#!/usr/bin/env ruby
require 'fileutils'
require 'pathname'
require 'shellwords'
require 'English'
require 'benchmark/ips'

############################
# USAGE
#
# bundle exec bin/bench_regression <ref1> <ref2>
#   <ref1> defaults to the current branch
#   <ref2> defaults to the master branch
# bundle exec bin/bench_regression current # will run on the current branch
# bundle exec bin/bench_regression revisions 792fb8a9053f8db3c562dae4f40907a582dd1720 master # every revision inclusive
# bundle exec bin/bench_regression 792fb8a9053f8db3c562dae4f40907a582dd1720 master bin/bench -r 2 -e CACHE_ON=off
###########################

class BenchRegression
  ROOT = Pathname File.expand_path(File.join(*['..', '..']), __FILE__)
  TMP_DIR_NAME = File.join('tmp', 'bench')
  TMP_DIR = File.join(ROOT, TMP_DIR_NAME)

  attr_reader :gem_require_paths

  def initialize
    @gem_require_paths = []
    refresh_temp_dir
  end

  def temp_dir_empty?
    Dir[File.join(TMP_DIR, '*')].none?
  end

  def empty_temp_dir
    return if temp_dir_empty?
    FileUtils.mkdir_p(TMP_DIR)
    Dir[File.join(TMP_DIR, '*')].each do |file|
      if File.directory?(file)
        FileUtils.rm_rf(file)
      else
        FileUtils.rm(file)
      end
    end
  end

  def fill_temp_dir
    Dir[File.join(ROOT, 'test', 'dummy', '*.{rb,ru}')].each do |file|
      FileUtils.cp(file, File.join(TMP_DIR, File.basename(file)))
    end
    file = File.join('bin', 'bench')
    FileUtils.cp(file, File.join(TMP_DIR, File.basename(file)))
    at_exit { empty_temp_dir }

    directory_name = `bundle exec gem unpack benchmark-ips --target=#{Shellwords.shellescape(TMP_DIR)}`[/benchmark-ips.+\d/]
    gem_path = File.join(TMP_DIR, directory_name)
    gem_require_paths << File.join(TMP_DIR_NAME, directory_name, 'lib')
    at_exit { FileUtils.rm_rf(gem_path) }
  end

  def refresh_temp_dir
    empty_temp_dir
    fill_temp_dir
  end

  module RevisionMethods
    module_function

    def current_branch
      @current_branch ||= `cat .git/HEAD | cut -d/ -f3,4,5`.chomp
    end

    def revisions(start_ref, end_ref)
      cmd = "git rev-list --reverse #{start_ref}..#{end_ref}"
      `#{cmd}`.chomp.split("\n")
    end

    def checkout_ref(ref)
      `git checkout #{ref}`.chomp
      abort "Checkout failed: #{ref}, #{$CHILD_STATUS.exitstatus}" unless $CHILD_STATUS.success?
    end

    def revision_description(rev)
      `git log --oneline -1 #{rev}`.chomp
    end

    def bundle
      `rm -f Gemfile.lock; bundle check || bundle --local --quiet || bundle --quiet`
      abort "Bundle failed at: #{ref}, #{$CHILD_STATUS.exitstatus}" unless $CHILD_STATUS.success?
    end

    def clean_head
      system('git reset --hard --quiet')
    end

    def capture(cmd)
      puts cmd
      `#{cmd}`.chomp
    end

    def sh(cmd)
      puts cmd
      system(cmd)
      $CHILD_STATUS.exitstatus
    end
  end
  include RevisionMethods

  def benchmark_refs(ref1: nil, ref2: nil, cmd:)
    checking_out = false
    ref0 = current_branch
    ref1 ||= current_branch
    ref2 ||= 'master'

    run_benchmark_at_ref(ref1, cmd)
    run_benchmark_at_ref(ref2, cmd)

    checking_out = true
    checkout_ref(ref0)
  rescue Exception # rubocop:disable Lint/RescueException
    checkout_ref(ref0) unless checking_out
    raise
  end

  def benchmark_revisions(ref1: nil, ref2: nil, cmd:)
    checking_out = false
    ref0 = current_branch
    ref1 ||= current_branch
    ref2 ||= 'master'

    revisions(ref1, ref2).each do |rev|
      STDERR.puts "Checking out: #{revision_description(rev)}"

      run_benchmark_at_ref(rev, cmd)
      clean_head
    end
    checking_out = true
    checkout_ref(ref0)
  rescue Exception # rubocop:disable Lint/RescueException
    STDERR.puts $!.message
    checkout_ref(ref0) unless checking_out
    raise
  end

  def run_benchmark_at_ref(ref, cmd)
    checkout_ref(ref)
    run_benchmark(cmd, ref)
  end

  def run_benchmark(cmd, ref)
    bundle
    benchmark_tests(cmd, ref)
  end

  def bundle
    `rm -f Gemfile.lock; bundle install` # bundle check || bundle --local --quiet || bundle --quiet')
  end

  def benchmark_tests(cmd, ref)
    cmd = "COMMIT_HASH=#{ref} bundle exec ruby -Ilib:#{gem_require_paths.join(':')} #{Shellwords.shelljoin(cmd)}"
    cmd.sub('bin/bench', "#{TMP_DIR_NAME}/bench")
    sh(cmd)
  end
end

if $PROGRAM_NAME == __FILE__
  benchmarking = BenchRegression.new

  case ARGV[0]
  when 'current'
    # super simple command line parsing
    args = ARGV.dup
    _    = args.shift
    cmd  = ['bin/bench'].concat args
    benchmarking.run_benchmark('bin/bench')
  when 'revisions'
    # Runs on every revision
    # super simple command line parsing
    args = ARGV.dup
    _         = args.shift
    ref1      = args.shift
    ref2      = args.shift
    cmd       = args
    benchmarking.benchmark_revisions(ref1: ref1, ref2: ref2, cmd: cmd)
  else
    # Default: Compare current_branch to master
    # Optionally: pass in two refs as args to `bin/bench_regression`
    # TODO: Consider checking across more revisions, to automatically find problems.

    # super simple command line parsing
    args = ARGV.dup
    ref1      = args.shift
    ref2      = args.shift
    cmd       = args
    benchmarking.benchmark_refs(ref1: ref1, ref2: ref2, cmd: cmd)
  end
end
