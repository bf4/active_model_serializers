#!/usr/bin/env ruby
require 'fileutils'
require 'pathname'
require 'shellwords'
require 'English'
require 'net/http'
require 'json'

############################
#
# A wrapper around git-bisect that stashes some code (bin/serve_dummy) for use in making requests
# running against each revision.
#
# USAGE
#
# bin/revision_runner <ref1> <ref2> <cmd>
#   <ref1> defaults to the current branch
#   <ref2> defaults to the master branch
# Runs <cmd> across every revisiion in the range, inclusive.
# Aborts when <cmd> exit code is non-zero.
###########################

class RevisionRunner
  BadRevisionError = Class.new(StandardError)
  ROOT = Pathname File.join(File.dirname(__FILE__), '..')
  TMP_DIR_BASE = File.join('tmp', 'revision_runner')
  TMP_DIR = File.join(ROOT, TMP_DIR_BASE)

  attr_accessor :url_base

  def initialize(prepend: '', append: '')
    self.url_base = "http://localhost:9292"
    refresh_temp_dir
  end

 def temp_dir_empty?
    Dir[File.join(TMP_DIR, '*')].none?
  end

  def empty_temp_dir
    return if temp_dir_empty?
    FileUtils.mkdir_p(TMP_DIR)
    Dir[File.join(TMP_DIR, '*')].each do |file|
      if File.directory?(file)
        FileUtils.rm_rf(file)
      else
        FileUtils.rm(file)
      end
    end
  end

  def fill_temp_dir
    Dir[File.join(ROOT, 'test', 'dummy', '*.{rb,ru}')].each do |file|
      FileUtils.cp(file, File.join(TMP_DIR, File.basename(file)))
    end
    file = File.join('bin', 'serve_dummy')
    FileUtils.cp(file, File.join(TMP_DIR, File.basename(file)))
    at_exit { empty_temp_dir }
  end

  def refresh_temp_dir
    empty_temp_dir
    fill_temp_dir
  end

  module GitCommands
    module_function

    def current_branch
      @current_branch ||= `cat .git/HEAD | cut -d/ -f3,4,5`.chomp
    end

    def revisions(start_ref, end_ref)
      cmd = "git rev-list --reverse #{start_ref}..#{end_ref}"
      `#{cmd}`.chomp.split("\n")
    end

    def checkout_ref(ref)
      debug { `git checkout #{ref}`.chomp }
      abort "Checkout failed: #{ref}, #{$CHILD_STATUS.exitstatus}" unless $CHILD_STATUS.success?
    end

    def revision_description(rev)
      `git log --oneline -1 #{rev}`
    end

    def bundle
      `rm -f Gemfile.lock; bundle check || bundle --local --quiet || bundle --quiet`
    end

    def clean_head
      system('git reset --hard --quiet')
    end
  end

  def run_revisions(ref1: nil, ref2: nil)
    ref0 = current_branch
    ref1 ||= current_branch
    ref2 ||= 'master'
    reports = {}

    revisions(ref1, ref2).each do |rev|
      STDERR.puts "Checking out: #{revision_description(rev)}"

      reports[rev] = run_at_ref(rev)
      clean_head
    end
    checkout_ref(ref0)
    debug { "OK for all revisions!" }
    reports
  rescue Exception # rubocop:disable Lint/RescueException
    STDERR.puts $!.message
    checkout_ref(ref0)
    raise
  ensure
    return reports
  end

  def run_at_ref(ref)
    checkout_ref(ref)
    bundle
    restart_server
  end

  def run_cmd
    assert_responses(get_caching, get_non_caching)
  rescue BadRevisionError => e
    debug { e.message }
    exit 1
  end

  def get_caching
    get(url_base + "/caching/on")
  end

  def get_non_caching
    get(url_base + "/non_caching/on")
  end

  def assert_responses(caching, non_caching)
    assert_equal(caching[:code], '200', "Caching response failed: #{caching}")
    assert_equal(caching[:body], expected, "Caching response format failed: \n+ #{caching[:body]}\n- #{expected}")
    assert_equal(caching[:content_type], 'application/json', "Caching response content type  failed: \n+ #{caching[:content_type]}\n- application/json")
    assert_equal(non_caching[:code], '200', "Non caching response failed: #{non_caching}")
    assert_equal(non_caching[:body], expected, "Non Caching response format failed: \n+ #{non_caching[:body]}\n- #{expected}")
    assert_equal(non_caching[:content_type], 'application/json', "Non caching response content type  failed: \n+ #{non_caching[:content_type]}\n- application/json")
  end

  def get(url)
    uri = URI(url)
    response = Net::HTTP.get_response(uri)
    { code: response.code, body: JSON.load(response.body), content_type: response.content_type }
  end

  def expected
    @expected ||=
      {
        "post" =>  {
          "id" =>  1,
          "title" =>  "New Post",
          "body" =>  "Body",
          "comments" => [
            {
              "id" =>  1,
              "body" =>  "ZOMG A COMMENT"
            }
          ],
          "blog" =>  {
            "id" =>  999,
            "name" =>  "Custom blog"
          },
          "author" =>  {
            "id" =>  1,
            "name" =>  "Joao Moura."
          }
        }
    }
  end

  def assert_equal(expected, actual, message)
    return true if expected == actual
    fail BadRevisionError, messsage
  end

  def restart_server
    server_script = File.join(TMP_DIR_BASE, 'serve_dummy')
    system("#{server_script} stop")
    at_exit { system("#{server_script} stop") }
    config_ru = Shellwords.shellescape(File.join(TMP_DIR_BASE, 'config.ru'))
    pid = `CONFIG_RU=#{config_ru} #{server_script} start`.chomp
    abort "No pid" if pid.empty?
    pid = Integer(pid)
    Process.kill(0, pid) # confirm running, else it raises
  end

  def debug(msg = '')
    if block_given? && $DEBUG
      STDOUT.puts yield
    else
      STDOUT.puts msg
    end
  end

end

if $PROGRAM_NAME == __FILE__
  runner = RevisionRunner.new
  reports = runner.run_revisions(ref1: ARGV[0], ref2: ARGV[1])
  reports.each do |name, value|
    STDERR.puts "#{name}\n\t#{value}"
  end
end
